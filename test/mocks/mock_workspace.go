// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/codegraph/workspace/workspace.go

// Package mocks is a generated GoMock package.
package mocks

import (
	types "codebase-indexer/pkg/codegraph/types"
	workspace "codebase-indexer/pkg/codegraph/workspace"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWorkspaceReader is a mock of WorkspaceReader interface.
type MockWorkspaceReader struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceReaderMockRecorder
}

// MockWorkspaceReaderMockRecorder is the mock recorder for MockWorkspaceReader.
type MockWorkspaceReaderMockRecorder struct {
	mock *MockWorkspaceReader
}

// NewMockWorkspaceReader creates a new mock instance.
func NewMockWorkspaceReader(ctrl *gomock.Controller) *MockWorkspaceReader {
	mock := &MockWorkspaceReader{ctrl: ctrl}
	mock.recorder = &MockWorkspaceReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceReader) EXPECT() *MockWorkspaceReaderMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockWorkspaceReader) Exists(ctx context.Context, path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockWorkspaceReaderMockRecorder) Exists(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockWorkspaceReader)(nil).Exists), ctx, path)
}

// FindProjects mocks base method.
func (m *MockWorkspaceReader) FindProjects(ctx context.Context, workspacePath string, resolveModule bool, visitPattern *types.VisitPattern) []*workspace.Project {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProjects", ctx, workspacePath, resolveModule, visitPattern)
	ret0, _ := ret[0].([]*workspace.Project)
	return ret0
}

// FindProjects indicates an expected call of FindProjects.
func (mr *MockWorkspaceReaderMockRecorder) FindProjects(ctx, workspace, resolveModule, visitPattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProjects", reflect.TypeOf((*MockWorkspaceReader)(nil).FindProjects), ctx, workspace, resolveModule, visitPattern)
}

// GetProjectByFilePath mocks base method.
func (m *MockWorkspaceReader) GetProjectByFilePath(ctx context.Context, workspacePath, filePath string, resolveModule bool) (*workspace.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByFilePath", ctx, workspacePath, filePath, resolveModule)
	ret0, _ := ret[0].(*workspace.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByFilePath indicates an expected call of GetProjectByFilePath.
func (mr *MockWorkspaceReaderMockRecorder) GetProjectByFilePath(ctx, workspace, filePath, resolveModule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByFilePath", reflect.TypeOf((*MockWorkspaceReader)(nil).GetProjectByFilePath), ctx, workspace, filePath, resolveModule)
}

// List mocks base method.
func (m *MockWorkspaceReader) List(ctx context.Context, path string) ([]*types.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, path)
	ret0, _ := ret[0].([]*types.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockWorkspaceReaderMockRecorder) List(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWorkspaceReader)(nil).List), ctx, path)
}

// ReadFile mocks base method.
func (m *MockWorkspaceReader) ReadFile(ctx context.Context, path string, option types.ReadOptions) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", ctx, path, option)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockWorkspaceReaderMockRecorder) ReadFile(ctx, path, option interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockWorkspaceReader)(nil).ReadFile), ctx, path, option)
}

// Stat mocks base method.
func (m *MockWorkspaceReader) Stat(filePath string) (*types.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", filePath)
	ret0, _ := ret[0].(*types.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockWorkspaceReaderMockRecorder) Stat(filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockWorkspaceReader)(nil).Stat), filePath)
}

// Tree mocks base method.
func (m *MockWorkspaceReader) Tree(ctx context.Context, workspacePath, subDir string, option types.TreeOptions) ([]*types.TreeNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tree", ctx, workspacePath, subDir, option)
	ret0, _ := ret[0].([]*types.TreeNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tree indicates an expected call of Tree.
func (mr *MockWorkspaceReaderMockRecorder) Tree(ctx, workspacePath, subDir, option interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tree", reflect.TypeOf((*MockWorkspaceReader)(nil).Tree), ctx, workspacePath, subDir, option)
}

// WalkFile mocks base method.
func (m *MockWorkspaceReader) WalkFile(ctx context.Context, dir string, walkFn types.WalkFunc, walkOpts types.WalkOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkFile", ctx, dir, walkFn, walkOpts)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkFile indicates an expected call of WalkFile.
func (mr *MockWorkspaceReaderMockRecorder) WalkFile(ctx, dir, walkFn, walkOpts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkFile", reflect.TypeOf((*MockWorkspaceReader)(nil).WalkFile), ctx, dir, walkFn, walkOpts)
}
