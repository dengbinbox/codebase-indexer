// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/workspace.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "codebase-indexer/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWorkspaceRepository is a mock of WorkspaceRepository interface.
type MockWorkspaceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceRepositoryMockRecorder
}

// MockWorkspaceRepositoryMockRecorder is the mock recorder for MockWorkspaceRepository.
type MockWorkspaceRepositoryMockRecorder struct {
	mock *MockWorkspaceRepository
}

// NewMockWorkspaceRepository creates a new mock instance.
func NewMockWorkspaceRepository(ctrl *gomock.Controller) *MockWorkspaceRepository {
	mock := &MockWorkspaceRepository{ctrl: ctrl}
	mock.recorder = &MockWorkspaceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceRepository) EXPECT() *MockWorkspaceRepositoryMockRecorder {
	return m.recorder
}

// CreateWorkspace mocks base method.
func (m *MockWorkspaceRepository) CreateWorkspace(workspace *model.Workspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspace", workspace)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorkspace indicates an expected call of CreateWorkspace.
func (mr *MockWorkspaceRepositoryMockRecorder) CreateWorkspace(workspace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspace", reflect.TypeOf((*MockWorkspaceRepository)(nil).CreateWorkspace), workspace)
}

// DeleteWorkspace mocks base method.
func (m *MockWorkspaceRepository) DeleteWorkspace(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspace", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkspace indicates an expected call of DeleteWorkspace.
func (mr *MockWorkspaceRepositoryMockRecorder) DeleteWorkspace(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspace", reflect.TypeOf((*MockWorkspaceRepository)(nil).DeleteWorkspace), path)
}

// GetActiveWorkspaces mocks base method.
func (m *MockWorkspaceRepository) GetActiveWorkspaces() ([]*model.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveWorkspaces")
	ret0, _ := ret[0].([]*model.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveWorkspaces indicates an expected call of GetActiveWorkspaces.
func (mr *MockWorkspaceRepositoryMockRecorder) GetActiveWorkspaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveWorkspaces", reflect.TypeOf((*MockWorkspaceRepository)(nil).GetActiveWorkspaces))
}

// GetWorkspaceByID mocks base method.
func (m *MockWorkspaceRepository) GetWorkspaceByID(id int64) (*model.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceByID", id)
	ret0, _ := ret[0].(*model.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceByID indicates an expected call of GetWorkspaceByID.
func (mr *MockWorkspaceRepositoryMockRecorder) GetWorkspaceByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceByID", reflect.TypeOf((*MockWorkspaceRepository)(nil).GetWorkspaceByID), id)
}

// GetWorkspaceByPath mocks base method.
func (m *MockWorkspaceRepository) GetWorkspaceByPath(path string) (*model.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceByPath", path)
	ret0, _ := ret[0].(*model.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceByPath indicates an expected call of GetWorkspaceByPath.
func (mr *MockWorkspaceRepositoryMockRecorder) GetWorkspaceByPath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceByPath", reflect.TypeOf((*MockWorkspaceRepository)(nil).GetWorkspaceByPath), path)
}

// ListWorkspaces mocks base method.
func (m *MockWorkspaceRepository) ListWorkspaces() ([]*model.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaces")
	ret0, _ := ret[0].([]*model.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaces indicates an expected call of ListWorkspaces.
func (mr *MockWorkspaceRepositoryMockRecorder) ListWorkspaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaces", reflect.TypeOf((*MockWorkspaceRepository)(nil).ListWorkspaces))
}

// UpdateCodegraphInfo mocks base method.
func (m *MockWorkspaceRepository) UpdateCodegraphInfo(path string, fileNum int, timestamp int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCodegraphInfo", path, fileNum, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCodegraphInfo indicates an expected call of UpdateCodegraphInfo.
func (mr *MockWorkspaceRepositoryMockRecorder) UpdateCodegraphInfo(path, fileNum, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCodegraphInfo", reflect.TypeOf((*MockWorkspaceRepository)(nil).UpdateCodegraphInfo), path, fileNum, timestamp)
}

// UpdateEmbeddingInfo mocks base method.
func (m *MockWorkspaceRepository) UpdateEmbeddingInfo(path string, fileNum int, timestamp int64, message, failedFilePaths string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmbeddingInfo", path, fileNum, timestamp, message, failedFilePaths)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmbeddingInfo indicates an expected call of UpdateEmbeddingInfo.
func (mr *MockWorkspaceRepositoryMockRecorder) UpdateEmbeddingInfo(path, fileNum, timestamp, message, failedFilePaths interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmbeddingInfo", reflect.TypeOf((*MockWorkspaceRepository)(nil).UpdateEmbeddingInfo), path, fileNum, timestamp, message, failedFilePaths)
}

// UpdateWorkspace mocks base method.
func (m *MockWorkspaceRepository) UpdateWorkspace(workspace *model.Workspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspace", workspace)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkspace indicates an expected call of UpdateWorkspace.
func (mr *MockWorkspaceRepositoryMockRecorder) UpdateWorkspace(workspace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspace", reflect.TypeOf((*MockWorkspaceRepository)(nil).UpdateWorkspace), workspace)
}

// UpdateWorkspaceByMap mocks base method.
func (m *MockWorkspaceRepository) UpdateWorkspaceByMap(path string, updates map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceByMap", path, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkspaceByMap indicates an expected call of UpdateWorkspaceByMap.
func (mr *MockWorkspaceRepositoryMockRecorder) UpdateWorkspaceByMap(path, updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceByMap", reflect.TypeOf((*MockWorkspaceRepository)(nil).UpdateWorkspaceByMap), path, updates)
}
