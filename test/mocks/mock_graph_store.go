// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/codegraph/store/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	store "codebase-indexer/pkg/codegraph/store"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "google.golang.org/protobuf/proto"
)

// MockGraphStorage is a mock of GraphStorage interface.
type MockGraphStorage struct {
	ctrl     *gomock.Controller
	recorder *MockGraphStorageMockRecorder
}

// MockGraphStorageMockRecorder is the mock recorder for MockGraphStorage.
type MockGraphStorageMockRecorder struct {
	mock *MockGraphStorage
}

// NewMockGraphStorage creates a new mock instance.
func NewMockGraphStorage(ctrl *gomock.Controller) *MockGraphStorage {
	mock := &MockGraphStorage{ctrl: ctrl}
	mock.recorder = &MockGraphStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphStorage) EXPECT() *MockGraphStorageMockRecorder {
	return m.recorder
}

// BatchSave mocks base method.
func (m *MockGraphStorage) BatchSave(ctx context.Context, projectUuid string, values store.Entries) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSave", ctx, projectUuid, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchSave indicates an expected call of BatchSave.
func (mr *MockGraphStorageMockRecorder) BatchSave(ctx, projectUuid, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSave", reflect.TypeOf((*MockGraphStorage)(nil).BatchSave), ctx, projectUuid, values)
}

// Close mocks base method.
func (m *MockGraphStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockGraphStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGraphStorage)(nil).Close))
}

// Delete mocks base method.
func (m *MockGraphStorage) Delete(ctx context.Context, projectUuid string, key store.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, projectUuid, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGraphStorageMockRecorder) Delete(ctx, projectUuid, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGraphStorage)(nil).Delete), ctx, projectUuid, key)
}

// DeleteAll mocks base method.
func (m *MockGraphStorage) DeleteAll(ctx context.Context, projectUuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, projectUuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockGraphStorageMockRecorder) DeleteAll(ctx, projectUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockGraphStorage)(nil).DeleteAll), ctx, projectUuid)
}

// Exists mocks base method.
func (m *MockGraphStorage) Exists(ctx context.Context, projectUuid string, key store.Key) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, projectUuid, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockGraphStorageMockRecorder) Exists(ctx, projectUuid, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockGraphStorage)(nil).Exists), ctx, projectUuid, key)
}

// ExistsProject mocks base method.
func (m *MockGraphStorage) ProjectIndexExists(projectUuid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectIndexExists", projectUuid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsProject indicates an expected call of ExistsProject.
func (mr *MockGraphStorageMockRecorder) ExistsProject(projectUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectIndexExists", reflect.TypeOf((*MockGraphStorage)(nil).ProjectIndexExists), projectUuid)
}

// Get mocks base method.
func (m *MockGraphStorage) Get(ctx context.Context, projectUuid string, key store.Key) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, projectUuid, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGraphStorageMockRecorder) Get(ctx, projectUuid, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGraphStorage)(nil).Get), ctx, projectUuid, key)
}

// Iter mocks base method.
func (m *MockGraphStorage) Iter(ctx context.Context, projectUuid string) store.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Iter", ctx, projectUuid)
	ret0, _ := ret[0].(store.Iterator)
	return ret0
}

// Iter indicates an expected call of Iter.
func (mr *MockGraphStorageMockRecorder) Iter(ctx, projectUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iter", reflect.TypeOf((*MockGraphStorage)(nil).Iter), ctx, projectUuid)
}

// Put mocks base method.
func (m *MockGraphStorage) Put(ctx context.Context, projectUuid string, entry *store.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, projectUuid, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockGraphStorageMockRecorder) Put(ctx, projectUuid, entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockGraphStorage)(nil).Put), ctx, projectUuid, entry)
}

// Size mocks base method.
func (m *MockGraphStorage) Size(ctx context.Context, projectUuid, keyPrefix string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size", ctx, projectUuid, keyPrefix)
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockGraphStorageMockRecorder) Size(ctx, projectUuid, keyPrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockGraphStorage)(nil).Size), ctx, projectUuid, keyPrefix)
}

// MockIterator is a mock of Iterator interface.
type MockIterator struct {
	ctrl     *gomock.Controller
	recorder *MockIteratorMockRecorder
}

// MockIteratorMockRecorder is the mock recorder for MockIterator.
type MockIteratorMockRecorder struct {
	mock *MockIterator
}

// NewMockIterator creates a new mock instance.
func NewMockIterator(ctrl *gomock.Controller) *MockIterator {
	mock := &MockIterator{ctrl: ctrl}
	mock.recorder = &MockIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIterator) EXPECT() *MockIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIterator) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIterator)(nil).Close))
}

// Error mocks base method.
func (m *MockIterator) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockIteratorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockIterator)(nil).Error))
}

// Key mocks base method.
func (m *MockIterator) Key() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockIteratorMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockIterator)(nil).Key))
}

// Next mocks base method.
func (m *MockIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockIterator)(nil).Next))
}

// Value mocks base method.
func (m *MockIterator) Value() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockIteratorMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockIterator)(nil).Value))
}

// MockKey is a mock of Key interface.
type MockKey struct {
	ctrl     *gomock.Controller
	recorder *MockKeyMockRecorder
}

// MockKeyMockRecorder is the mock recorder for MockKey.
type MockKeyMockRecorder struct {
	mock *MockKey
}

// NewMockKey creates a new mock instance.
func NewMockKey(ctrl *gomock.Controller) *MockKey {
	mock := &MockKey{ctrl: ctrl}
	mock.recorder = &MockKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKey) EXPECT() *MockKeyMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockKey) Get() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeyMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKey)(nil).Get))
}

// MockEntries is a mock of Entries interface.
type MockEntries struct {
	ctrl     *gomock.Controller
	recorder *MockEntriesMockRecorder
}

// MockEntriesMockRecorder is the mock recorder for MockEntries.
type MockEntriesMockRecorder struct {
	mock *MockEntries
}

// NewMockEntries creates a new mock instance.
func NewMockEntries(ctrl *gomock.Controller) *MockEntries {
	mock := &MockEntries{ctrl: ctrl}
	mock.recorder = &MockEntriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntries) EXPECT() *MockEntriesMockRecorder {
	return m.recorder
}

// Key mocks base method.
func (m *MockEntries) Key(i int) store.Key {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key", i)
	ret0, _ := ret[0].(store.Key)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockEntriesMockRecorder) Key(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockEntries)(nil).Key), i)
}

// Len mocks base method.
func (m *MockEntries) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockEntriesMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockEntries)(nil).Len))
}

// Value mocks base method.
func (m *MockEntries) Value(i int) proto.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", i)
	ret0, _ := ret[0].(proto.Message)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockEntriesMockRecorder) Value(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockEntries)(nil).Value), i)
}
