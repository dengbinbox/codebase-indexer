package api

/**
curl --location 'http://localhost:11380/codebase-indexer/api/v1/files/structure?clientId=123&codebasePath=g%3A%5Cprojects%5Ccodebase-indexer&filePath=G%3A%5Cprojects%5Ccasdoor%5Ccontrollers%5Cauth.go' \
--header 'Authorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImNlcnQtYnVpbHQtaW4iLCJ0eXAiOiJKV1QifQ.eyJvd25lciI6InVzZXItZ3JvdXAiLCJuYW1lIjoiNjdlNjhkYjctNTJmZC00Y2JkLWI2YTYtY2U0NjU5M2YwMDhiIiwiY3JlYXRlZFRpbWUiOiIyMDI1LTA3LTE0VDExOjIxOjM5WiIsInVwZGF0ZWRUaW1lIjoiMjAyNS0wNy0xNFQxMToyMTozOVoiLCJkZWxldGVkVGltZSI6IiIsImlkIjoiYWM4NDllYjEtM2UyOC00MDQzLTkzYjgtODc1NzNkYzFlZjIxIiwidHlwZSI6Im5vcm1hbC11c2VyIiwicGFzc3dvcmQiOiIiLCJwYXNzd29yZFNhbHQiOiIiLCJwYXNzd29yZFR5cGUiOiJwbGFpbiIsImRpc3BsYXlOYW1lIjoiMTM0ODQ0NzcwMzMiLCJmaXJzdE5hbWUiOiIiLCJsYXN0TmFtZSI6IiIsImF2YXRhciI6IiIsImF2YXRhclR5cGUiOiIiLCJwZXJtYW5lbnRBdmF0YXIiOiIiLCJlbWFpbCI6IiIsImVtYWlsVmVyaWZpZWQiOmZhbHNlLCJwaG9uZSI6IjEzNDg0NDc3MDMzIiwiY291bnRyeUNvZGUiOiJDTiIsInJlZ2lvbiI6IiIsImxvY2F0aW9uIjoiIiwiYWRkcmVzcyI6W10sImFmZmlsaWF0aW9uIjoiIiwidGl0bGUiOiIiLCJpZENhcmRUeXBlIjoiIiwiaWRDYXJkIjoiIiwiaG9tZXBhZ2UiOiIiLCJiaW8iOiIiLCJsYW5ndWFnZSI6IiIsImdlbmRlciI6IiIsImJpcnRoZGF5IjoiIiwiZWR1Y2F0aW9uIjoiIiwic2NvcmUiOjAsImthcm1hIjowLCJyYW5raW5nIjozODEsImlzRGVmYXVsdEF2YXRhciI6ZmFsc2UsImlzT25saW5lIjpmYWxzZSwiaXNBZG1pbiI6ZmFsc2UsImlzRm9yYmlkZGVuIjpmYWxzZSwiaXNEZWxldGVkIjpmYWxzZSwic2lnbnVwQXBwbGljYXRpb24iOiIiLCJoYXNoIjoiIiwicHJlSGFzaCI6IiIsImFjY2Vzc0tleSI6IiIsImFjY2Vzc1NlY3JldCI6IiIsImdpdGh1YiI6IiIsImdvb2dsZSI6IiIsInFxIjoiIiwid2VjaGF0IjoiIiwiZmFjZWJvb2siOiIiLCJkaW5ndGFsayI6IiIsIndlaWJvIjoiIiwiZ2l0ZWUiOiIiLCJsaW5rZWRpbiI6IiIsIndlY29tIjoiIiwibGFyayI6IiIsImdpdGxhYiI6IiIsImNyZWF0ZWRJcCI6IiIsImxhc3RTaWduaW5UaW1lIjoiIiwibGFzdFNpZ25pbklwIjoiIiwicHJlZmVycmVkTWZhVHlwZSI6IiIsInJlY292ZXJ5Q29kZXMiOm51bGwsInRvdHBTZWNyZXQiOiIiLCJtZmFQaG9uZUVuYWJsZWQiOmZhbHNlLCJtZmFFbWFpbEVuYWJsZWQiOmZhbHNlLCJsZGFwIjoiIiwicHJvcGVydGllcyI6e30sInJvbGVzIjpbXSwicGVybWlzc2lvbnMiOltdLCJncm91cHMiOltdLCJsYXN0U2lnbmluV3JvbmdUaW1lIjoiIiwic2lnbmluV3JvbmdUaW1lcyI6MCwibWFuYWdlZEFjY291bnRzIjpudWxsLCJ0b2tlblR5cGUiOiJhY2Nlc3MtdG9rZW4iLCJ0YWciOiIiLCJhenAiOiI3YzUxYTZiOTJkZmViZmE1NWQ5NiIsInVuaXZlcnNhbF9pZCI6ImI5MzI1NzRmLTNkYjctNGVjNC05YjgxLWU0NDRmNTRiM2JmNSIsInBob25lX251bWJlciI6IjEzNDg0NDc3MDMzIiwiZ2l0aHViX2FjY291bnQiOiI1NDE3MjkxMyIsImlzcyI6Imh0dHBzOi8vY2FzZG9vci5zaGVubWEuc3ZjLmNsdXN0ZXIubG9jYWw6ODAwMCIsInN1YiI6ImI5MzI1NzRmLTNkYjctNGVjNC05YjgxLWU0NDRmNTRiM2JmNSIsImF1ZCI6WyI3YzUxYTZiOTJkZmViZmE1NWQ5NiJdLCJleHAiOjE3NTg4NjM1ODcsIm5iZiI6MTc1NTI2MzU4NywiaWF0IjoxNzU1MjYzNTg3LCJqdGkiOiJhZG1pbi9jMGNjNTVhOC00YTU1LTRkNjUtYTQ0Mi0zM2U4ZDI5MjZiYmMifQ.Rwrf5nwZzRmK_uNh7JGDVPBfSjRJ1DIwYK-_3hkYYNEHzcZEAz7uJL1SR2NHXZqIcRRaBQsvjFn5ItPEKuuD2VYOHizlVdWblUlPj6RflBgixo5KDR2ZjtHT1D6ho-3xUt4tKqWEpWG4twP9k7jJaHAJeQ2zx9igfIxTQWDiYquQa-d-APH0GS3uFcNbATOg-Dns54np-n48pT1ms9r3Mk4lGU4srBhGGJKSJ3G3gLaNoRa8GStQ4W7zqGrbv2zZZ0YouGgDfpocd5UNbjaJpQHsNOqB2JkfG-ZOJc5j9s5HGoRaq7thx3boncxC2KNm8RBJNykYf2X6F3vqay0MiGAfULkx6BGXeK3XcAlQP1yY_sDUctqdWOnZdxEhFM-ZGLyg5SvL5jwI9WdWY9_eOZeTShsrwiFBQorfD_dbLjcKb191CusrjEk4JSrc0ujSXVnF12Up_egu6llisFfI1fKOtRScdCEBcrJAZltvUqpU-c4EGR7n0QmwROc8aSYx3rxNMrmA4UbAWmYW1DXfm9MvjZvtxOjIulwSV6Xr3ldR2ixDzQtCgG3CovTlcFXS-ciiuhRfeQjtQJuvSkw56c0s3In4venhFW3E0kAeXfJRG52rH9j9FRlxmDkYb01IfedKS-BCk7CGGXBMz-LrXj5Vh6Eubrg_1J7N7ErkQmY'
response:
{
    "code": "0",
    "message": "ok",
    "success": true,
    "data": {
        "list": [
            {
                "type": "declaration.function",
                "name": "codeToResponse",
                "position": {
                    "startLine": 42,
                    "startColumn": 1,
                    "endLine": 48,
                    "endColumn": 2
                },
                "content": "func codeToResponse(code *object.Code) *Response {\n\tif code.Code == \"\" {\n\t\treturn &Response{Status: \"error\", Msg: code.Message, Data: code.Code}\n\t}\n\n\treturn &Response{Status: \"ok\", Msg: \"\", Data: code.Code}\n}"
            },
            {
                "type": "declaration.function",
                "name": "tokenToResponse",
                "position": {
                    "startLine": 50,
                    "startColumn": 1,
                    "endLine": 55,
                    "endColumn": 2
                },
                "content": "func tokenToResponse(token *object.Token) *Response {\n\tif token.AccessToken == \"\" {\n\t\treturn &Response{Status: \"error\", Msg: \"fail to get accessToken\", Data: token.AccessToken}\n\t}\n\treturn &Response{Status: \"ok\", Msg: \"\", Data: token.AccessToken, Data2: token.RefreshToken}\n}"
            },
            {
                "type": "declaration.method",
                "name": "HandleLoggedIn",
                "position": {
                    "startLine": 58,
                    "startColumn": 1,
                    "endLine": 251,
                    "endColumn": 2
                },
                "content": "func (c *ApiController) HandleLoggedIn(application *object.Application, user *object.User, form *form.AuthForm) (resp *Response) {\n\tif user.IsForbidden {\n\t\tc.ResponseError(c.T(\"check:The user is forbidden to sign in, please contact the administrator\"))\n\t\treturn\n\t}\n\n\tuserId := user.GetId()\n\n\tclientIp := util.GetClientIpFromRequest(c.Ctx.Request)\n\terr := object.CheckEntryIp(clientIp, user, application, application.OrganizationObj, c.GetAcceptLanguage())\n\tif err != nil {\n\t\tc.ResponseError(err.Error())\n\t\treturn\n\t}\n\n\tallowed, err := object.CheckLoginPermission(userId, application)\n\tif err != nil {\n\t\tc.ResponseError(err.Error(), nil)\n\t\treturn\n\t}\n\tif !allowed {\n\t\tc.ResponseError(c.T(\"auth:Unauthorized operation\"))\n\t\treturn\n\t}\n\n\t// check user's tag\n\tif !user.IsGlobalAdmin() && !user.IsAdmin && len(application.Tags) > 0 {\n\t\t// only users with the tag that is listed in the application tags can login\n\t\tif !util.InSlice(application.Tags, user.Tag) {\n\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"auth:User's tag: %s is not listed in the application's tags\"), user.Tag))\n\t\t\treturn\n\t\t}\n\t}\n\n\t// check whether paid-user have active subscription\n\tif user.Type == \"paid-user\" {\n\t\tsubscriptions, err := object.GetSubscriptionsByUser(user.Owner, user.Name)\n\t\tif err != nil {\n\t\t\tc.ResponseError(err.Error())\n\t\t\treturn\n\t\t}\n\t\texistActiveSubscription := false\n\t\tfor _, subscription := range subscriptions {\n\t\t\tif subscription.State == object.SubStateActive {\n\t\t\t\texistActiveSubscription = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif !existActiveSubscription {\n\t\t\t// check pending subscription\n\t\t\tfor _, sub := range subscriptions {\n\t\t\t\tif sub.State == object.SubStatePending {\n\t\t\t\t\tc.ResponseOk(\"BuyPlanResult\", sub)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\t// paid-user does not have active or pending subscription, find the default pricing of application\n\t\t\tpricing, err := object.GetApplicationDefaultPricing(application.Organization, application.Name)\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif pricing == nil {\n\t\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"auth:paid-user %s does not have active or pending subscription and the application: %s does not have default pricing\"), user.Name, application.Name))\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\t// let the paid-user select plan\n\t\t\t\tc.ResponseOk(\"SelectPlan\", pricing)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t}\n\t}\n\n\tif form.Type == ResponseTypeLogin {\n\t\tc.SetSessionUsername(userId)\n\t\tutil.LogInfo(c.Ctx, \"API: [%s] signed in\", userId)\n\t\tresp = &Response{Status: \"ok\", Msg: \"\", Data: userId, Data2: user.NeedUpdatePassword}\n\t} else if form.Type == ResponseTypeCode {\n\t\tclientId := c.Input().Get(\"clientId\")\n\t\tresponseType := c.Input().Get(\"responseType\")\n\t\tredirectUri := c.Input().Get(\"redirectUri\")\n\t\tscope := c.Input().Get(\"scope\")\n\t\tstate := c.Input().Get(\"state\")\n\t\tnonce := c.Input().Get(\"nonce\")\n\t\tchallengeMethod := c.Input().Get(\"code_challenge_method\")\n\t\tcodeChallenge := c.Input().Get(\"code_challenge\")\n\n\t\tif challengeMethod != \"S256\" && challengeMethod != \"null\" && challengeMethod != \"\" {\n\t\t\tc.ResponseError(c.T(\"auth:Challenge method should be S256\"))\n\t\t\treturn\n\t\t}\n\t\tcode, err := object.GetOAuthCode(userId, clientId, form.Provider, responseType, redirectUri, scope, state, nonce, codeChallenge, c.Ctx.Request.Host, c.GetAcceptLanguage())\n\t\tif err != nil {\n\t\t\tc.ResponseError(err.Error(), nil)\n\t\t\treturn\n\t\t}\n\n\t\tresp = codeToResponse(code)\n\t\tresp.Data2 = user.NeedUpdatePassword\n\t\tif application.EnableSigninSession || application.HasPromptPage() {\n\t\t\t// The prompt page needs the user to be signed in\n\t\t\tc.SetSessionUsername(userId)\n\t\t}\n\t} else if form.Type == ResponseTypeToken || form.Type == ResponseTypeIdToken { // implicit flow\n\t\tif !object.IsGrantTypeValid(form.Type, application.GrantTypes) {\n\t\t\tresp = &Response{Status: \"error\", Msg: fmt.Sprintf(\"error: grant_type: %s is not supported in this application\", form.Type), Data: \"\"}\n\t\t} else {\n\t\t\tscope := c.Input().Get(\"scope\")\n\t\t\tnonce := c.Input().Get(\"nonce\")\n\t\t\ttoken, _ := object.GetTokenByUser(application, user, scope, nonce, c.Ctx.Request.Host)\n\t\t\tresp = tokenToResponse(token)\n\n\t\t\tresp.Data2 = user.NeedUpdatePassword\n\t\t}\n\t} else if form.Type == ResponseTypeDevice {\n\t\tauthCache, ok := object.DeviceAuthMap.LoadAndDelete(form.UserCode)\n\t\tif !ok {\n\t\t\tc.ResponseError(c.T(\"auth:UserCode Expired\"))\n\t\t\treturn\n\t\t}\n\n\t\tauthCacheCast := authCache.(object.DeviceAuthCache)\n\t\tif authCacheCast.RequestAt.Add(time.Second * 120).Before(time.Now()) {\n\t\t\tc.ResponseError(c.T(\"auth:UserCode Expired\"))\n\t\t\treturn\n\t\t}\n\n\t\tdeviceAuthCacheDeviceCode, ok := object.DeviceAuthMap.Load(authCacheCast.UserName)\n\t\tif !ok {\n\t\t\tc.ResponseError(c.T(\"auth:DeviceCode Invalid\"))\n\t\t\treturn\n\t\t}\n\n\t\tdeviceAuthCacheDeviceCodeCast := deviceAuthCacheDeviceCode.(object.DeviceAuthCache)\n\t\tdeviceAuthCacheDeviceCodeCast.UserName = user.Name\n\t\tdeviceAuthCacheDeviceCodeCast.UserSignIn = true\n\n\t\tobject.DeviceAuthMap.Store(authCacheCast.UserName, deviceAuthCacheDeviceCodeCast)\n\n\t\tresp = &Response{Status: \"ok\", Msg: \"\", Data: userId, Data2: user.NeedUpdatePassword}\n\t} else if form.Type == ResponseTypeSaml { // saml flow\n\t\tres, redirectUrl, method, err := object.GetSamlResponse(application, user, form.SamlRequest, c.Ctx.Request.Host)\n\t\tif err != nil {\n\t\t\tc.ResponseError(err.Error(), nil)\n\t\t\treturn\n\t\t}\n\t\tresp = &Response{Status: \"ok\", Msg: \"\", Data: res, Data2: map[string]interface{}{\"redirectUrl\": redirectUrl, \"method\": method, \"needUpdatePassword\": user.NeedUpdatePassword}}\n\n\t\tif application.EnableSigninSession || application.HasPromptPage() {\n\t\t\t// The prompt page needs the user to be signed in\n\t\t\tc.SetSessionUsername(userId)\n\t\t}\n\t} else if form.Type == ResponseTypeCas {\n\t\t// not oauth but CAS SSO protocol\n\t\tservice := c.Input().Get(\"service\")\n\t\tresp = wrapErrorResponse(nil)\n\t\tif service != \"\" {\n\t\t\tst, err := object.GenerateCasToken(userId, service)\n\t\t\tif err != nil {\n\t\t\t\tresp = wrapErrorResponse(err)\n\t\t\t} else {\n\t\t\t\tresp.Data = st\n\t\t\t}\n\t\t}\n\n\t\tif application.EnableSigninSession || application.HasPromptPage() {\n\t\t\t// The prompt page needs the user to be signed in\n\t\t\tc.SetSessionUsername(userId)\n\t\t}\n\t} else {\n\t\tresp = wrapErrorResponse(fmt.Errorf(\"unknown response type: %s\", form.Type))\n\t}\n\n\t// if user did not check auto signin\n\tif resp.Status == \"ok\" && !form.AutoSignin {\n\t\tc.setExpireForSession()\n\t}\n\n\tif resp.Status == \"ok\" {\n\t\t_, err = object.AddSession(&object.Session{\n\t\t\tOwner:       user.Owner,\n\t\t\tName:        user.Name,\n\t\t\tApplication: application.Name,\n\t\t\tSessionId:   []string{c.Ctx.Input.CruSession.SessionID()},\n\t\t})\n\t\tif err != nil {\n\t\t\tc.ResponseError(err.Error(), nil)\n\t\t\treturn\n\t\t}\n\t}\n\n\treturn resp\n}"
            },
            {
                "type": "declaration.method",
                "name": "GetApplicationLogin",
                "position": {
                    "startLine": 264,
                    "startColumn": 1,
                    "endLine": 323,
                    "endColumn": 2
                },
                "content": "func (c *ApiController) GetApplicationLogin() {\n\tclientId := c.Input().Get(\"clientId\")\n\tresponseType := c.Input().Get(\"responseType\")\n\tredirectUri := c.Input().Get(\"redirectUri\")\n\tscope := c.Input().Get(\"scope\")\n\tstate := c.Input().Get(\"state\")\n\tid := c.Input().Get(\"id\")\n\tloginType := c.Input().Get(\"type\")\n\tuserCode := c.Input().Get(\"userCode\")\n\n\tvar application *object.Application\n\tvar msg string\n\tvar err error\n\tif loginType == \"code\" {\n\t\tmsg, application, err = object.CheckOAuthLogin(clientId, responseType, redirectUri, scope, state, c.GetAcceptLanguage())\n\t\tif err != nil {\n\t\t\tc.ResponseError(err.Error())\n\t\t\treturn\n\t\t}\n\t} else if loginType == \"cas\" {\n\t\tapplication, err = object.GetApplication(id)\n\t\tif err != nil {\n\t\t\tc.ResponseError(err.Error())\n\t\t\treturn\n\t\t}\n\t\tif application == nil {\n\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"auth:The application: %s does not exist\"), id))\n\t\t\treturn\n\t\t}\n\n\t\terr = object.CheckCasLogin(application, c.GetAcceptLanguage(), redirectUri)\n\t\tif err != nil {\n\t\t\tc.ResponseError(err.Error())\n\t\t\treturn\n\t\t}\n\t} else if loginType == \"device\" {\n\t\tdeviceAuthCache, ok := object.DeviceAuthMap.Load(userCode)\n\t\tif !ok {\n\t\t\tc.ResponseError(c.T(\"auth:UserCode Invalid\"))\n\t\t\treturn\n\t\t}\n\n\t\tdeviceAuthCacheCast := deviceAuthCache.(object.DeviceAuthCache)\n\t\tapplication, err = object.GetApplication(deviceAuthCacheCast.ApplicationId)\n\t\tif err != nil {\n\t\t\tc.ResponseError(err.Error())\n\t\t\treturn\n\t\t}\n\t}\n\n\tclientIp := util.GetClientIpFromRequest(c.Ctx.Request)\n\tobject.CheckEntryIp(clientIp, nil, application, nil, c.GetAcceptLanguage())\n\n\tapplication = object.GetMaskedApplication(application, \"\")\n\tif msg != \"\" {\n\t\tc.ResponseError(msg, application)\n\t} else {\n\t\tc.ResponseOk(application)\n\t}\n}"
            },
            {
                "type": "declaration.function",
                "name": "setHttpClient",
                "position": {
                    "startLine": 325,
                    "startColumn": 1,
                    "endLine": 331,
                    "endColumn": 2
                },
                "content": "func setHttpClient(idProvider idp.IdProvider, providerType string) {\n\tif isProxyProviderType(providerType) {\n\t\tidProvider.SetHttpClient(proxy.ProxyHttpClient)\n\t} else {\n\t\tidProvider.SetHttpClient(proxy.DefaultHttpClient)\n\t}\n}"
            },
            {
                "type": "declaration.function",
                "name": "isProxyProviderType",
                "position": {
                    "startLine": 333,
                    "startColumn": 1,
                    "endLine": 354,
                    "endColumn": 2
                },
                "content": "func isProxyProviderType(providerType string) bool {\n\tproviderTypes := []string{\n\t\t\"GitHub\",\n\t\t\"Google\",\n\t\t\"Facebook\",\n\t\t\"LinkedIn\",\n\t\t\"Steam\",\n\t\t\"Line\",\n\t\t\"Amazon\",\n\t\t\"Instagram\",\n\t\t\"TikTok\",\n\t\t\"Twitter\",\n\t\t\"Uber\",\n\t\t\"Yahoo\",\n\t}\n\tfor _, v := range providerTypes {\n\t\tif strings.EqualFold(v, providerType) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}"
            },
            {
                "type": "declaration.function",
                "name": "checkMfaEnable",
                "position": {
                    "startLine": 356,
                    "startColumn": 1,
                    "endLine": 383,
                    "endColumn": 2
                },
                "content": "func checkMfaEnable(c *ApiController, user *object.User, organization *object.Organization, verificationType string) bool {\n\tif object.IsNeedPromptMfa(organization, user) {\n\t\t// The prompt page needs the user to be srigned in\n\t\tc.SetSessionUsername(user.GetId())\n\t\tc.ResponseOk(object.RequiredMfa)\n\t\treturn true\n\t}\n\n\tif user.IsMfaEnabled() {\n\t\tc.setMfaUserSession(user.GetId())\n\t\tmfaList := object.GetAllMfaProps(user, true)\n\t\tmfaAllowList := []*object.MfaProps{}\n\t\tfor _, prop := range mfaList {\n\t\t\tif prop.MfaType == verificationType || !prop.Enabled {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tmfaAllowList = append(mfaAllowList, prop)\n\t\t}\n\t\tif len(mfaAllowList) >= 1 {\n\t\t\tc.SetSession(\"verificationCodeType\", verificationType)\n\t\t\tc.Ctx.Input.CruSession.SessionRelease(c.Ctx.ResponseWriter)\n\t\t\tc.ResponseOk(object.NextMfa, mfaAllowList)\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}"
            },
            {
                "type": "declaration.method",
                "name": "Login",
                "position": {
                    "startLine": 400,
                    "startColumn": 1,
                    "endLine": 1072,
                    "endColumn": 2
                },
                "content": "func (c *ApiController) Login() {\n\tresp := &Response{}\n\n\tvar authForm form.AuthForm\n\terr := json.Unmarshal(c.Ctx.Input.RequestBody, &authForm)\n\tif err != nil {\n\t\tc.ResponseError(err.Error())\n\t\treturn\n\t}\n\n\tverificationType := \"\"\n\n\tif authForm.Username != \"\" {\n\t\tif authForm.Type == ResponseTypeLogin {\n\t\t\tif c.GetSessionUsername() != \"\" {\n\t\t\t\tc.ResponseError(c.T(\"account:Please sign out first\"), c.GetSessionUsername())\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tvar user *object.User\n\t\tif authForm.SigninMethod == \"Face ID\" {\n\t\t\tif user, err = object.GetUserByFields(authForm.Organization, authForm.Username); err != nil {\n\t\t\t\tc.ResponseError(err.Error(), nil)\n\t\t\t\treturn\n\t\t\t} else if user == nil {\n\t\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"general:The user: %s doesn't exist\"), util.GetId(authForm.Organization, authForm.Username)))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tvar application *object.Application\n\t\t\tapplication, err = object.GetApplication(fmt.Sprintf(\"admin/%s\", authForm.Application))\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error(), nil)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif application == nil {\n\t\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"auth:The application: %s does not exist\"), authForm.Application))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif !application.IsFaceIdEnabled() {\n\t\t\t\tc.ResponseError(c.T(\"auth:The login method: login with face is not enabled for the application\"))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tfaceIdProvider, err := object.GetFaceIdProviderByApplication(util.GetId(application.Owner, application.Name), \"false\", c.GetAcceptLanguage())\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error())\n\t\t\t}\n\n\t\t\tif faceIdProvider == nil {\n\t\t\t\tif err := object.CheckFaceId(user, authForm.FaceId, c.GetAcceptLanguage()); err != nil {\n\t\t\t\t\tc.ResponseError(err.Error(), nil)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tok, err := user.CheckUserFace(authForm.FaceIdImage, faceIdProvider)\n\t\t\t\tif err != nil {\n\t\t\t\t\tc.ResponseError(err.Error(), nil)\n\t\t\t\t}\n\n\t\t\t\tif !ok {\n\t\t\t\t\tc.ResponseError(i18n.Translate(c.GetAcceptLanguage(), \"check:Face data does not exist, cannot log in\"))\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t} else if authForm.Password == \"\" {\n\t\t\tif user, err = object.GetUserByFields(authForm.Organization, authForm.Username); err != nil {\n\t\t\t\tc.ResponseError(err.Error(), nil)\n\t\t\t\treturn\n\t\t\t} else if user == nil {\n\t\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"general:The user: %s doesn't exist\"), util.GetId(authForm.Organization, authForm.Username)))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tvar application *object.Application\n\t\t\tapplication, err = object.GetApplication(fmt.Sprintf(\"admin/%s\", authForm.Application))\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error(), nil)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif application == nil {\n\t\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"auth:The application: %s does not exist\"), authForm.Application))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tverificationCodeType := object.GetVerifyType(authForm.Username)\n\t\t\tif verificationCodeType == object.VerifyTypeEmail && !application.IsCodeSigninViaEmailEnabled() {\n\t\t\t\tc.ResponseError(c.T(\"auth:The login method: login with email is not enabled for the application\"))\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif verificationCodeType == object.VerifyTypePhone && !application.IsCodeSigninViaSmsEnabled() {\n\t\t\t\tc.ResponseError(c.T(\"auth:The login method: login with SMS is not enabled for the application\"))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tvar checkDest string\n\t\t\tif verificationCodeType == object.VerifyTypePhone {\n\t\t\t\tauthForm.CountryCode = user.GetCountryCode(authForm.CountryCode)\n\t\t\t\tvar ok bool\n\t\t\t\tif checkDest, ok = util.GetE164Number(authForm.Username, authForm.CountryCode); !ok {\n\t\t\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"verification:Phone number is invalid in your region %s\"), authForm.CountryCode))\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// check result through Email or Phone\n\t\t\terr = object.CheckSigninCode(user, checkDest, authForm.Code, c.GetAcceptLanguage())\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(fmt.Sprintf(\"%s - %s\", verificationCodeType, err.Error()))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// disable the verification code\n\t\t\terr = object.DisableVerificationCode(checkDest)\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error(), nil)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif verificationCodeType == object.VerifyTypePhone {\n\t\t\t\tverificationType = \"sms\"\n\t\t\t} else {\n\t\t\t\tverificationType = \"email\"\n\t\t\t\tif !user.EmailVerified {\n\t\t\t\t\tuser.EmailVerified = true\n\t\t\t\t\t_, err = object.UpdateUser(user.GetId(), user, []string{\"email_verified\"}, false)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tc.ResponseError(err.Error(), nil)\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tvar application *object.Application\n\t\t\tapplication, err = object.GetApplication(fmt.Sprintf(\"admin/%s\", authForm.Application))\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error(), nil)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif application == nil {\n\t\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"auth:The application: %s does not exist\"), authForm.Application))\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif authForm.SigninMethod == \"Password\" && !application.IsPasswordEnabled() {\n\t\t\t\tc.ResponseError(c.T(\"auth:The login method: login with password is not enabled for the application\"))\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif authForm.SigninMethod == \"LDAP\" && !application.IsLdapEnabled() {\n\t\t\t\tc.ResponseError(c.T(\"auth:The login method: login with LDAP is not enabled for the application\"))\n\t\t\t\treturn\n\t\t\t}\n\t\t\tvar enableCaptcha bool\n\t\t\tif enableCaptcha, err = object.CheckToEnableCaptcha(application, authForm.Organization, authForm.Username); err != nil {\n\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\treturn\n\t\t\t} else if enableCaptcha {\n\t\t\t\tcaptchaProvider, err := object.GetCaptchaProviderByApplication(util.GetId(application.Owner, application.Name), \"false\", c.GetAcceptLanguage())\n\t\t\t\tif err != nil {\n\t\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tif captchaProvider.Type != \"Default\" {\n\t\t\t\t\tauthForm.ClientSecret = captchaProvider.ClientSecret\n\t\t\t\t}\n\n\t\t\t\tvar isHuman bool\n\t\t\t\tisHuman, err = captcha.VerifyCaptchaByCaptchaType(authForm.CaptchaType, authForm.CaptchaToken, authForm.ClientSecret)\n\t\t\t\tif err != nil {\n\t\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tif !isHuman {\n\t\t\t\t\tc.ResponseError(c.T(\"verification:Turing test failed.\"))\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpassword := authForm.Password\n\n\t\t\tif application.OrganizationObj != nil {\n\t\t\t\tpassword, err = util.GetUnobfuscatedPassword(application.OrganizationObj.PasswordObfuscatorType, application.OrganizationObj.PasswordObfuscatorKey, authForm.Password)\n\t\t\t\tif err != nil {\n\t\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tisSigninViaLdap := authForm.SigninMethod == \"LDAP\"\n\t\t\tvar isPasswordWithLdapEnabled bool\n\t\t\tif authForm.SigninMethod == \"Password\" {\n\t\t\t\tisPasswordWithLdapEnabled = application.IsPasswordWithLdapEnabled()\n\t\t\t} else {\n\t\t\t\tisPasswordWithLdapEnabled = false\n\t\t\t}\n\t\t\tuser, err = object.CheckUserPassword(authForm.Organization, authForm.Username, password, c.GetAcceptLanguage(), enableCaptcha, isSigninViaLdap, isPasswordWithLdapEnabled)\n\t\t}\n\n\t\tif err != nil {\n\t\t\tc.ResponseError(err.Error())\n\t\t\treturn\n\t\t} else {\n\t\t\tvar application *object.Application\n\t\t\tapplication, err = object.GetApplication(fmt.Sprintf(\"admin/%s\", authForm.Application))\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif application == nil {\n\t\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"auth:The application: %s does not exist\"), authForm.Application))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tvar organization *object.Organization\n\t\t\torganization, err = object.GetOrganizationByUser(user)\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error())\n\t\t\t}\n\n\t\t\tif checkMfaEnable(c, user, organization, verificationType) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tresp = c.HandleLoggedIn(application, user, &authForm)\n\n\t\t\tc.Ctx.Input.SetParam(\"recordUserId\", user.GetId())\n\t\t}\n\t} else if authForm.Provider != \"\" {\n\t\tvar application *object.Application\n\t\tif authForm.ClientId != \"\" {\n\t\t\tapplication, err = object.GetApplicationByClientId(authForm.ClientId)\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t} else {\n\t\t\tapplication, err = object.GetApplication(fmt.Sprintf(\"admin/%s\", authForm.Application))\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif application == nil {\n\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"auth:The application: %s does not exist\"), authForm.Application))\n\t\t\treturn\n\t\t}\n\n\t\tvar organization *object.Organization\n\t\torganization, err = object.GetOrganization(util.GetId(\"admin\", application.Organization))\n\t\tif err != nil {\n\t\t\tc.ResponseError(c.T(err.Error()))\n\t\t}\n\n\t\tvar provider *object.Provider\n\t\tprovider, err = object.GetProvider(util.GetId(\"admin\", authForm.Provider))\n\t\tif err != nil {\n\t\t\tc.ResponseError(err.Error())\n\t\t\treturn\n\t\t}\n\t\tif provider == nil {\n\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"auth:The provider: %s does not exist\"), authForm.Provider))\n\t\t}\n\n\t\tproviderItem := application.GetProviderItem(provider.Name)\n\t\tif !providerItem.IsProviderVisible() {\n\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"auth:The provider: %s is not enabled for the application\"), provider.Name))\n\t\t\treturn\n\t\t}\n\t\tuserInfo := &idp.UserInfo{}\n\t\tif provider.Category == \"SAML\" {\n\t\t\t// SAML\n\t\t\tuserInfo, err = object.ParseSamlResponse(authForm.SamlResponse, provider, c.Ctx.Request.Host)\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t} else if provider.Category == \"OAuth\" || provider.Category == \"Web3\" {\n\t\t\t// OAuth\n\t\t\tidpInfo := object.FromProviderToIdpInfo(c.Ctx, provider)\n\t\t\tvar idProvider idp.IdProvider\n\t\t\tidProvider, err = idp.GetIdProvider(idpInfo, authForm.RedirectUri)\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif idProvider == nil {\n\t\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"storage:The provider type: %s is not supported\"), provider.Type))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tsetHttpClient(idProvider, provider.Type)\n\n\t\t\tif authForm.State != conf.GetConfigString(\"authState\") && authForm.State != application.Name {\n\t\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"auth:State expected: %s, but got: %s\"), conf.GetConfigString(\"authState\"), authForm.State))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// https://github.com/golang/oauth2/issues/123#issuecomment-103715338\n\t\t\tvar token *oauth2.Token\n\t\t\ttoken, err = idProvider.GetToken(authForm.Code)\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif !token.Valid() {\n\t\t\t\tc.ResponseError(c.T(\"auth:Invalid token\"))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tuserInfo, err = idProvider.GetUserInfo(token)\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"auth:Failed to login in: %s\"), err.Error()))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif provider.EmailRegex != \"\" {\n\t\t\t\treg, err := regexp.Compile(provider.EmailRegex)\n\t\t\t\tif err != nil {\n\t\t\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"auth:Failed to login in: %s\"), err.Error()))\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif !reg.MatchString(userInfo.Email) {\n\t\t\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"check:Email is invalid\")))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif authForm.Method == \"signup\" {\n\t\t\tuser := &object.User{}\n\t\t\tif provider.Category == \"SAML\" {\n\t\t\t\t// The userInfo.Id is the NameID in SAML response, it could be name / email / phone\n\t\t\t\tuser, err = object.GetUserByFields(application.Organization, userInfo.Id)\n\t\t\t\tif err != nil {\n\t\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t} else if provider.Category == \"OAuth\" || provider.Category == \"Web3\" {\n\t\t\t\tuser, err = object.GetUserByField(application.Organization, provider.Type, userInfo.Id)\n\t\t\t\tif err != nil {\n\t\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif user != nil && !user.IsDeleted {\n\t\t\t\t// Sign in via OAuth (want to sign up but already have account)\n\t\t\t\t// sync info from 3rd-party if possible\n\t\t\t\t_, err = object.SetUserOAuthProperties(organization, user, provider.Type, userInfo)\n\t\t\t\tif err != nil {\n\t\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tif checkMfaEnable(c, user, organization, verificationType) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tresp = c.HandleLoggedIn(application, user, &authForm)\n\n\t\t\t\tc.Ctx.Input.SetParam(\"recordUserId\", user.GetId())\n\t\t\t} else if provider.Category == \"OAuth\" || provider.Category == \"Web3\" {\n\t\t\t\t// Sign up via OAuth\n\t\t\t\tif application.EnableLinkWithEmail {\n\t\t\t\t\tif userInfo.Email != \"\" {\n\t\t\t\t\t\t// Find existing user with Email\n\t\t\t\t\t\tuser, err = object.GetUserByField(application.Organization, \"email\", userInfo.Email)\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif user == nil && userInfo.Phone != \"\" {\n\t\t\t\t\t\t// Find existing user with phone number\n\t\t\t\t\t\tuser, err = object.GetUserByField(application.Organization, \"phone\", userInfo.Phone)\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif user == nil || user.IsDeleted {\n\t\t\t\t\tif !application.EnableSignUp {\n\t\t\t\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"auth:The account for provider: %s and username: %s (%s) does not exist and is not allowed to sign up as new account, please contact your IT support\"), provider.Type, userInfo.Username, userInfo.DisplayName))\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\tif !providerItem.CanSignUp {\n\t\t\t\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"auth:The account for provider: %s and username: %s (%s) does not exist and is not allowed to sign up as new account via %%s, please use another way to sign up\"), provider.Type, userInfo.Username, userInfo.DisplayName, provider.Type))\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\tif application.IsSignupItemRequired(\"Invitation code\") {\n\t\t\t\t\t\tc.ResponseError(c.T(\"check:Invitation code cannot be blank\"))\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\t// Handle username conflicts\n\t\t\t\t\tvar tmpUser *object.User\n\t\t\t\t\ttmpUser, err = object.GetUser(util.GetId(application.Organization, userInfo.Username))\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\tif tmpUser != nil {\n\t\t\t\t\t\tvar uid uuid.UUID\n\t\t\t\t\t\tuid, err = uuid.NewRandom()\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tuidStr := strings.Split(uid.String(), \"-\")\n\t\t\t\t\t\tuserInfo.Username = fmt.Sprintf(\"%s_%s\", userInfo.Username, uidStr[1])\n\t\t\t\t\t}\n\n\t\t\t\t\tproperties := map[string]string{}\n\t\t\t\t\tvar count int64\n\t\t\t\t\tcount, err = object.GetUserCount(application.Organization, \"\", \"\", \"\")\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\tproperties[\"no\"] = strconv.Itoa(int(count + 2))\n\t\t\t\t\tvar initScore int\n\t\t\t\t\tinitScore, err = organization.GetInitScore()\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tc.ResponseError(fmt.Errorf(c.T(\"account:Get init score failed, error: %w\"), err).Error())\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\tuserId := userInfo.Id\n\t\t\t\t\tif userId == \"\" {\n\t\t\t\t\t\tuserId = util.GenerateId()\n\t\t\t\t\t}\n\n\t\t\t\t\tuser = &object.User{\n\t\t\t\t\t\tOwner:             application.Organization,\n\t\t\t\t\t\tName:              userInfo.Username,\n\t\t\t\t\t\tCreatedTime:       util.GetCurrentTime(),\n\t\t\t\t\t\tId:                userId,\n\t\t\t\t\t\tType:              \"normal-user\",\n\t\t\t\t\t\tDisplayName:       userInfo.DisplayName,\n\t\t\t\t\t\tAvatar:            userInfo.AvatarUrl,\n\t\t\t\t\t\tAddress:           []string{},\n\t\t\t\t\t\tEmail:             userInfo.Email,\n\t\t\t\t\t\tPhone:             userInfo.Phone,\n\t\t\t\t\t\tCountryCode:       userInfo.CountryCode,\n\t\t\t\t\t\tRegion:            userInfo.CountryCode,\n\t\t\t\t\t\tScore:             initScore,\n\t\t\t\t\t\tIsAdmin:           false,\n\t\t\t\t\t\tIsForbidden:       false,\n\t\t\t\t\t\tIsDeleted:         false,\n\t\t\t\t\t\tSignupApplication: application.Name,\n\t\t\t\t\t\tProperties:        properties,\n\t\t\t\t\t}\n\n\t\t\t\t\tvar affected bool\n\t\t\t\t\taffected, err = object.AddUser(user)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\tif !affected {\n\t\t\t\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"auth:Failed to create user, user information is invalid: %s\"), util.StructToJson(user)))\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\tif providerItem.SignupGroup != \"\" {\n\t\t\t\t\t\tuser.Groups = []string{providerItem.SignupGroup}\n\t\t\t\t\t\t_, err = object.UpdateUser(user.GetId(), user, []string{\"groups\"}, false)\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// sync info from 3rd-party if possible\n\t\t\t\t_, err = object.SetUserOAuthProperties(organization, user, provider.Type, userInfo)\n\t\t\t\tif err != nil {\n\t\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t_, err = object.LinkUserAccount(user, provider.Type, userInfo.Id)\n\t\t\t\tif err != nil {\n\t\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tresp = c.HandleLoggedIn(application, user, &authForm)\n\n\t\t\t\tc.Ctx.Input.SetParam(\"recordUserId\", user.GetId())\n\t\t\t\tc.Ctx.Input.SetParam(\"recordSignup\", \"true\")\n\t\t\t} else if provider.Category == \"SAML\" {\n\t\t\t\t// TODO: since we get the user info from SAML response, we can try to create the user\n\t\t\t\tresp = &Response{Status: \"error\", Msg: fmt.Sprintf(c.T(\"general:The user: %s doesn't exist\"), util.GetId(application.Organization, userInfo.Id))}\n\t\t\t}\n\t\t\t// resp = &Response{Status: \"ok\", Msg: \"\", Data: res}\n\t\t} else { // authForm.Method != \"signup\"\n\t\t\tuserId := c.GetSessionUsername()\n\t\t\tif userId == \"\" {\n\t\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"general:The user: %s doesn't exist\"), util.GetId(application.Organization, userInfo.Id)), userInfo)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tvar oldUser *object.User\n\t\t\toldUser, err = object.GetUserByField(application.Organization, provider.Type, userInfo.Id)\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif oldUser != nil {\n\t\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"auth:The account for provider: %s and username: %s (%s) is already linked to another account: %s (%s)\"), provider.Type, userInfo.Username, userInfo.DisplayName, oldUser.Name, oldUser.DisplayName))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tvar user *object.User\n\t\t\tuser, err = object.GetUser(userId)\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// sync info from 3rd-party if possible\n\t\t\t_, err = object.SetUserOAuthProperties(organization, user, provider.Type, userInfo)\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tvar isLinked bool\n\t\t\tisLinked, err = object.LinkUserAccount(user, provider.Type, userInfo.Id)\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif isLinked {\n\t\t\t\tresp = &Response{Status: \"ok\", Msg: \"\", Data: isLinked}\n\t\t\t} else {\n\t\t\t\tresp = &Response{Status: \"error\", Msg: \"Failed to link user account\", Data: isLinked}\n\t\t\t}\n\t\t}\n\t} else if c.getMfaUserSession() != \"\" {\n\t\tvar user *object.User\n\t\tuser, err = object.GetUser(c.getMfaUserSession())\n\t\tif err != nil {\n\t\t\tc.ResponseError(err.Error())\n\t\t\treturn\n\t\t}\n\t\tif user == nil {\n\t\t\tc.ResponseError(\"expired user session\")\n\t\t\treturn\n\t\t}\n\n\t\tif authForm.Passcode != \"\" {\n\t\t\tif authForm.MfaType == c.GetSession(\"verificationCodeType\") {\n\t\t\t\tc.ResponseError(\"Invalid multi-factor authentication type\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\tuser.CountryCode = user.GetCountryCode(user.CountryCode)\n\t\t\tmfaUtil := object.GetMfaUtil(authForm.MfaType, user.GetMfaProps(authForm.MfaType, false))\n\t\t\tif mfaUtil == nil {\n\t\t\t\tc.ResponseError(\"Invalid multi-factor authentication type\")\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tpassed, err := c.checkOrgMasterVerificationCode(user, authForm.Passcode)\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif !passed {\n\t\t\t\terr = mfaUtil.Verify(authForm.Passcode)\n\t\t\t\tif err != nil {\n\t\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc.SetSession(\"verificationCodeType\", \"\")\n\t\t} else if authForm.RecoveryCode != \"\" {\n\t\t\terr = object.MfaRecover(user, authForm.RecoveryCode)\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t} else {\n\t\t\tc.ResponseError(\"missing passcode or recovery code\")\n\t\t\treturn\n\t\t}\n\n\t\tvar application *object.Application\n\t\tif authForm.ClientId == \"\" {\n\t\t\tapplication, err = object.GetApplication(fmt.Sprintf(\"admin/%s\", authForm.Application))\n\t\t} else {\n\t\t\tapplication, err = object.GetApplicationByClientId(authForm.ClientId)\n\t\t}\n\t\tif err != nil {\n\t\t\tc.ResponseError(err.Error())\n\t\t\treturn\n\t\t}\n\n\t\tif application == nil {\n\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"auth:The application: %s does not exist\"), authForm.Application))\n\t\t\treturn\n\t\t}\n\n\t\tresp = c.HandleLoggedIn(application, user, &authForm)\n\t\tc.setMfaUserSession(\"\")\n\n\t\tc.Ctx.Input.SetParam(\"recordUserId\", user.GetId())\n\t} else {\n\t\tif c.GetSessionUsername() != \"\" {\n\t\t\t// user already signed in to Casdoor, so let the user click the avatar button to do the quick sign-in\n\t\t\tvar application *object.Application\n\t\t\tapplication, err = object.GetApplication(fmt.Sprintf(\"admin/%s\", authForm.Application))\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif application == nil {\n\t\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"auth:The application: %s does not exist\"), authForm.Application))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif authForm.Provider == \"\" {\n\t\t\t\tauthForm.Provider = authForm.ProviderBack\n\t\t\t}\n\n\t\t\tuser := c.getCurrentUser()\n\t\t\tresp = c.HandleLoggedIn(application, user, &authForm)\n\n\t\t\tc.Ctx.Input.SetParam(\"recordUserId\", user.GetId())\n\t\t} else {\n\t\t\tc.ResponseError(fmt.Sprintf(c.T(\"auth:Unknown authentication type (not password or provider), form = %s\"), util.StructToJson(authForm)))\n\t\t\treturn\n\t\t}\n\t}\n\n\tif authForm.Language != \"\" {\n\t\tuser := c.getCurrentUser()\n\t\tif user != nil {\n\t\t\tuser.Language = authForm.Language\n\t\t\t_, err = object.UpdateUser(user.GetId(), user, []string{\"language\"}, user.IsAdmin)\n\t\t\tif err != nil {\n\t\t\t\tc.ResponseError(err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n\n\tc.Data[\"json\"] = resp\n\tc.ServeJSON()\n}"
            },
            {
                "type": "declaration.method",
                "name": "GetSamlLogin",
                "position": {
                    "startLine": 1074,
                    "startColumn": 1,
                    "endLine": 1083,
                    "endColumn": 2
                },
                "content": "func (c *ApiController) GetSamlLogin() {\n\tproviderId := c.Input().Get(\"id\")\n\trelayState := c.Input().Get(\"relayState\")\n\tauthURL, method, err := object.GenerateSamlRequest(providerId, relayState, c.Ctx.Request.Host, c.GetAcceptLanguage())\n\tif err != nil {\n\t\tc.ResponseError(err.Error())\n\t\treturn\n\t}\n\tc.ResponseOk(authURL, method)\n}"
            },
            {
                "type": "declaration.method",
                "name": "HandleSamlLogin",
                "position": {
                    "startLine": 1085,
                    "startColumn": 1,
                    "endLine": 1099,
                    "endColumn": 2
                },
                "content": "func (c *ApiController) HandleSamlLogin() {\n\trelayState := c.Input().Get(\"RelayState\")\n\tsamlResponse := c.Input().Get(\"SAMLResponse\")\n\tdecode, err := base64.StdEncoding.DecodeString(relayState)\n\tif err != nil {\n\t\tc.ResponseError(err.Error())\n\t\treturn\n\t}\n\tslice := strings.Split(string(decode), \"&\")\n\trelayState = url.QueryEscape(relayState)\n\tsamlResponse = url.QueryEscape(samlResponse)\n\ttargetUrl := fmt.Sprintf(\"%s?relayState=%s&samlResponse=%s\",\n\t\tslice[4], relayState, samlResponse)\n\tc.Redirect(targetUrl, http.StatusSeeOther)\n}"
            },
            {
                "type": "declaration.method",
                "name": "HandleOfficialAccountEvent",
                "position": {
                    "startLine": 1106,
                    "startColumn": 1,
                    "endLine": 1169,
                    "endColumn": 2
                },
                "content": "func (c *ApiController) HandleOfficialAccountEvent() {\n\tif c.Ctx.Request.Method == \"GET\" {\n\t\ts := c.Ctx.Request.FormValue(\"echostr\")\n\t\techostr, _ := strconv.Atoi(s)\n\t\tc.SetData(echostr)\n\t\tc.ServeJSON()\n\t\treturn\n\t}\n\trespBytes, err := io.ReadAll(c.Ctx.Request.Body)\n\tif err != nil {\n\t\tc.ResponseError(err.Error())\n\t\treturn\n\t}\n\tsignature := c.Input().Get(\"signature\")\n\ttimestamp := c.Input().Get(\"timestamp\")\n\tnonce := c.Input().Get(\"nonce\")\n\tvar data struct {\n\t\tMsgType      string `xml:\"MsgType\"`\n\t\tEvent        string `xml:\"Event\"`\n\t\tEventKey     string `xml:\"EventKey\"`\n\t\tFromUserName string `xml:\"FromUserName\"`\n\t\tTicket       string `xml:\"Ticket\"`\n\t}\n\terr = xml.Unmarshal(respBytes, &data)\n\tif err != nil {\n\t\tc.ResponseError(err.Error())\n\t\treturn\n\t}\n\tif strings.ToUpper(data.Event) != \"SCAN\" && strings.ToUpper(data.Event) != \"SUBSCRIBE\" {\n\t\tc.Ctx.WriteString(\"\")\n\t\treturn\n\t}\n\tif data.Ticket == \"\" {\n\t\tc.ResponseError(err.Error())\n\t\treturn\n\t}\n\n\tproviderId := data.EventKey\n\tprovider, err := object.GetProvider(providerId)\n\tif err != nil {\n\t\tc.ResponseError(err.Error())\n\t\treturn\n\t}\n\tif data.Ticket == \"\" {\n\t\tc.ResponseError(\"empty ticket\")\n\t\treturn\n\t}\n\tif !idp.VerifyWechatSignature(provider.Content, nonce, timestamp, signature) {\n\t\tc.ResponseError(\"invalid signature\")\n\t\treturn\n\t}\n\n\tidp.Lock.Lock()\n\tif idp.WechatCacheMap == nil {\n\t\tidp.WechatCacheMap = make(map[string]idp.WechatCacheMapValue)\n\t}\n\tidp.WechatCacheMap[data.Ticket] = idp.WechatCacheMapValue{\n\t\tIsScanned:     true,\n\t\tWechatUnionId: data.FromUserName,\n\t}\n\tidp.Lock.Unlock()\n\n\tc.Ctx.WriteString(\"\")\n}"
            },
            {
                "type": "declaration.method",
                "name": "GetWebhookEventType",
                "position": {
                    "startLine": 1177,
                    "startColumn": 1,
                    "endLine": 1189,
                    "endColumn": 2
                },
                "content": "func (c *ApiController) GetWebhookEventType() {\n\tticket := c.Input().Get(\"ticket\")\n\n\tidp.Lock.RLock()\n\t_, ok := idp.WechatCacheMap[ticket]\n\tidp.Lock.RUnlock()\n\tif !ok {\n\t\tc.ResponseError(\"ticket not found\")\n\t\treturn\n\t}\n\n\tc.ResponseOk(\"SCAN\", ticket)\n}"
            },
            {
                "type": "declaration.method",
                "name": "GetQRCode",
                "position": {
                    "startLine": 1197,
                    "startColumn": 1,
                    "endLine": 1211,
                    "endColumn": 2
                },
                "content": "func (c *ApiController) GetQRCode() {\n\tproviderId := c.Input().Get(\"id\")\n\tprovider, err := object.GetProvider(providerId)\n\tif err != nil {\n\t\tc.ResponseError(err.Error())\n\t\treturn\n\t}\n\tcode, ticket, err := idp.GetWechatOfficialAccountQRCode(provider.ClientId2, provider.ClientSecret2, providerId)\n\tif err != nil {\n\t\tc.ResponseError(err.Error())\n\t\treturn\n\t}\n\n\tc.ResponseOk(code, ticket)\n}"
            },
            {
                "type": "declaration.method",
                "name": "GetCaptchaStatus",
                "position": {
                    "startLine": 1220,
                    "startColumn": 1,
                    "endLine": 1244,
                    "endColumn": 2
                },
                "content": "func (c *ApiController) GetCaptchaStatus() {\n\torganization := c.Input().Get(\"organization\")\n\tuserId := c.Input().Get(\"userId\")\n\tuser, err := object.GetUserByFields(organization, userId)\n\tif err != nil {\n\t\tc.ResponseError(err.Error())\n\t\treturn\n\t}\n\n\tcaptchaEnabled := false\n\tif user != nil {\n\t\tvar failedSigninLimit int\n\t\tfailedSigninLimit, _, err = object.GetFailedSigninConfigByUser(user)\n\t\tif err != nil {\n\t\t\tc.ResponseError(err.Error())\n\t\t\treturn\n\t\t}\n\n\t\tif user.SigninWrongTimes >= failedSigninLimit {\n\t\t\tcaptchaEnabled = true\n\t\t}\n\t}\n\n\tc.ResponseOk(captchaEnabled)\n}"
            },
            {
                "type": "declaration.method",
                "name": "Callback",
                "position": {
                    "startLine": 1252,
                    "startColumn": 1,
                    "endLine": 1258,
                    "endColumn": 2
                },
                "content": "func (c *ApiController) Callback() {\n\tcode := c.GetString(\"code\")\n\tstate := c.GetString(\"state\")\n\n\tfrontendCallbackUrl := fmt.Sprintf(\"/callback?code=%s&state=%s\", code, state)\n\tc.Ctx.Redirect(http.StatusFound, frontendCallbackUrl)\n}"
            },
            {
                "type": "declaration.method",
                "name": "DeviceAuth",
                "position": {
                    "startLine": 1266,
                    "startColumn": 1,
                    "endLine": 1330,
                    "endColumn": 2
                },
                "content": "func (c *ApiController) DeviceAuth() {\n\tclientId := c.Input().Get(\"client_id\")\n\tscope := c.Input().Get(\"scope\")\n\tapplication, err := object.GetApplicationByClientId(clientId)\n\tif err != nil {\n\t\tc.Data[\"json\"] = object.TokenError{\n\t\t\tError:            err.Error(),\n\t\t\tErrorDescription: err.Error(),\n\t\t}\n\t\tc.ServeJSON()\n\t\treturn\n\t}\n\n\tif application == nil {\n\t\tc.Data[\"json\"] = object.TokenError{\n\t\t\tError:            c.T(\"token:Invalid client_id\"),\n\t\t\tErrorDescription: c.T(\"token:Invalid client_id\"),\n\t\t}\n\t\tc.ServeJSON()\n\t\treturn\n\t}\n\n\tdeviceCode := util.GenerateId()\n\tuserCode := util.GetRandomName()\n\n\tgenerateTime := 0\n\tfor {\n\t\tif generateTime > 5 {\n\t\t\tc.Data[\"json\"] = object.TokenError{\n\t\t\t\tError:            \"userCode gen\",\n\t\t\t\tErrorDescription: c.T(\"token:Invalid client_id\"),\n\t\t\t}\n\t\t\tc.ServeJSON()\n\t\t\treturn\n\t\t}\n\t\t_, ok := object.DeviceAuthMap.Load(userCode)\n\t\tif !ok {\n\t\t\tbreak\n\t\t}\n\n\t\tgenerateTime++\n\t}\n\n\tdeviceAuthCache := object.DeviceAuthCache{\n\t\tUserSignIn:    false,\n\t\tUserName:      \"\",\n\t\tScope:         scope,\n\t\tApplicationId: application.GetId(),\n\t\tRequestAt:     time.Now(),\n\t}\n\n\tuserAuthCache := object.DeviceAuthCache{\n\t\tUserSignIn:    false,\n\t\tUserName:      deviceCode,\n\t\tScope:         scope,\n\t\tApplicationId: application.GetId(),\n\t\tRequestAt:     time.Now(),\n\t}\n\n\tobject.DeviceAuthMap.Store(deviceCode, deviceAuthCache)\n\tobject.DeviceAuthMap.Store(userCode, userAuthCache)\n\n\tc.Data[\"json\"] = object.GetDeviceAuthResponse(deviceCode, userCode, c.Ctx.Request.Host)\n\tc.ServeJSON()\n}"
            }
        ]
    }
}
*/
