name: Build and Package All Platforms

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version string for the build (e.g., 1.0.0, 1.0.0_beta)'
        required: true
        type: string

jobs:
  build:
    # 使用矩阵策略来定义不同的操作系统和架构组合
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux amd64
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            artifact_name: codebase-indexer-linux-amd64
          # Linux arm64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            artifact_name: codebase-indexer-linux-arm64
          # Linux 386
          - os: ubuntu-latest
            goos: linux
            goarch: 386
            artifact_name: codebase-indexer-linux-386
          # Linux arm
          - os: ubuntu-latest
            goos: linux
            goarch: arm
            artifact_name: codebase-indexer-linux-arm
          # Windows amd64
          - os: windows-latest
            goos: windows
            goarch: amd64
            artifact_name: codebase-indexer-windows-amd64
          # Windows 386
          - os: windows-latest
            goos: windows
            goarch: 386
            artifact_name: codebase-indexer-windows-386
          # Windows arm64
          - os: windows-latest
            goos: windows
            goarch: arm64
            artifact_name: codebase-indexer-windows-arm64
          # macOS amd64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            artifact_name: codebase-indexer-darwin-amd64
          # macOS ARM64 (Apple Silicon)
          - os: macos-latest
            goos: darwin
            goarch: arm64
            artifact_name: codebase-indexer-darwin-arm64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'

    - name: Install cross-compilation dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        # Install base tools first
        sudo apt-get install -y musl-tools
        # Install cross-compilation tools without multilib conflicts
        sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf
        # Install multilib support separately if needed for 386 architecture
        if [ "${{ matrix.goarch }}" == "386" ]; then
          sudo apt-get install -y gcc-multilib
        fi

    - name: Install cross-compilation dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install MinGW-w64 toolchain for cross-compilation
        echo "Installing MinGW-w64 toolchain..."
        
        # Install Chocolatey package manager if not available
        if ! command -v choco &> /dev/null; then
          echo "Installing Chocolatey..."
          Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        fi
        
        # Install MinGW-w64 toolchain for all architectures
        echo "Installing MinGW-w64 toolchain for cross-compilation..."
        choco install -y mingw --params "/arch:x64 /threads:posix"
        choco install -y mingw --params "/arch:x86 /threads:posix"
        choco install -y mingw --params "/arch:arm64 /threads:posix"
        
        # Add MinGW-w64 to PATH
        echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw32\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw-arm64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        # Verify compilers are available
        echo "Verifying cross-compilation tools..."
        echo "Checking for x86_64-w64-mingw32-gcc:"
        where x86_64-w64-mingw32-gcc || echo "x86_64-w64-mingw32-gcc not found"
        echo "Checking for i686-w64-mingw32-gcc:"
        where i686-w64-mingw32-gcc || echo "i686-w64-mingw32-gcc not found"
        echo "Checking for aarch64-w64-mingw32-gcc:"
        where aarch64-w64-mingw32-gcc || echo "aarch64-w64-mingw32-gcc not found"
        
        echo "Windows cross-compilation tools installation completed"

    - name: Install cross-compilation dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # macOS cross-compilation tools are available by default
        clang --version
        echo "macOS cross-compilation tools are available by default"

    - name: Build for ${{ matrix.goos }} ${{ matrix.goarch }}
      shell: bash
      run: |
        echo "Starting build for ${{ matrix.goos }} ${{ matrix.goarch }} version ${{ github.event.inputs.version }}"
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        
        # Make build script executable
        chmod +x scripts/build.sh
        
        # Run build script with error handling
        echo "Running build script..."
        if ! ./scripts/build.sh "${{ matrix.goos }}" "${{ matrix.goarch }}" "${{ github.event.inputs.version }}"; then
          echo "Build script failed with exit code $?"
          echo "Checking if scripts directory exists:"
          if [ -d "scripts" ]; then
            echo "Scripts directory contents:"
            ls -la scripts/
          else
            echo "Scripts directory does not exist"
          fi
          exit 1
        fi
        
        echo "Build script completed successfully"
        
    - name: Check build output
      shell: bash
      run: |
        echo "Checking if build directory exists..."
        echo "Current directory: $(pwd)"
        
        if [ -d "bin" ]; then
          echo "bin directory exists, contents:"
          ls -la bin/
          
          if [ -d "bin/${{ github.event.inputs.version }}" ]; then
            echo "Build directory exists, contents:"
            ls -la "bin/${{ github.event.inputs.version }}/"
            
            # Check if the expected executable file exists
            EXPECTED_FILE="codebase-indexer-${{ matrix.goos }}-${{ matrix.goarch }}-${{ github.event.inputs.version }}"
            if [ "${{ matrix.goos }}" = "windows" ]; then
              EXPECTED_FILE="${EXPECTED_FILE}.exe"
            fi
            
            if [ -f "bin/${{ github.event.inputs.version }}/$EXPECTED_FILE" ]; then
              echo "Expected executable file exists: $EXPECTED_FILE"
              echo "File details:"
              ls -la "bin/${{ github.event.inputs.version }}/$EXPECTED_FILE"
            else
              echo "Expected executable file does not exist: $EXPECTED_FILE"
              echo "Available files in build directory:"
              ls -la "bin/${{ github.event.inputs.version }}/"
              exit 1
            fi
          else
            echo "Build directory does not exist: bin/${{ github.event.inputs.version }}"
            exit 1
          fi
        else
          echo "bin directory does not exist"
          echo "Current directory contents:"
          ls -la
          exit 1
        fi

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-${{ github.event.inputs.version }}
        path: |
          bin/${{ github.event.inputs.version }}/codebase-indexer-${{ matrix.goos }}-${{ matrix.goarch }}-${{ github.event.inputs.version }}*
        retention-days: 30